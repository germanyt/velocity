/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var velocity = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,7],$V2=[1,8],$V3=[1,9],$V4=[1,10],$V5=[1,13],$V6=[1,14],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[1,20],$Vc=[1,21],$Vd=[1,22],$Ve=[1,23],$Vf=[1,24],$Vg=[1,25],$Vh=[1,26],$Vi=[4,72,86,88],$Vj=[4,8,9,10,11,12,15,68,70,72,73,74,75,76,77,80,82,83,84,86,88,89],$Vk=[1,36],$Vl=[4,8,9,10,11,12,15,19,29,32,34,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,57,68,70,71,72,73,74,75,76,77,80,82,83,84,86,88,89,90],$Vm=[1,52],$Vn=[4,8,9,10,11,12,15,19,26,29,30,32,34,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,57,68,70,71,72,73,74,75,76,77,80,82,83,84,86,88,89,90],$Vo=[1,82],$Vp=[1,81],$Vq=[1,77],$Vr=[1,73],$Vs=[1,74],$Vt=[1,75],$Vu=[1,76],$Vv=[1,78],$Vw=[1,79],$Vx=[1,80],$Vy=[1,95],$Vz=[1,94],$VA=[4,8,9,10,11,12,15,19,26,27,29,30,32,34,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,57,68,70,71,72,73,74,75,76,77,80,82,83,84,86,88,89,90],$VB=[29,32],$VC=[19,29,32,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,90],$VD=[2,63],$VE=[2,64],$VF=[19,29,32,34,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,90],$VG=[1,109],$VH=[1,125],$VI=[1,124],$VJ=[1,132],$VK=[1,133],$VL=[1,134],$VM=[1,135],$VN=[1,136],$VO=[1,137],$VP=[1,138],$VQ=[1,139],$VR=[1,140],$VS=[1,141],$VT=[1,142],$VU=[1,143],$VV=[1,144],$VW=[29,43,44,45,46,47,48,49,50,51,52,53,54,55],$VX=[32,40],$VY=[15,18,30,47,61,62,63,64,65,66,67],$VZ=[1,178],$V_=[1,179],$V$=[1,199],$V01=[29,46,47,48,49,50,51,52,53,54,55],$V11=[29,48,49,50,51,52,53,54,55],$V21=[29,52,53,54,55];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"EOF":4,"statements":5,"states":6,"statement":7,"TEXT":8,"BTEXT":9,"COMMENT":10,"BCOMMENT":11,"RTEXT":12,"reference":13,"directive":14,"$":15,"ref":16,"!":17,"{":18,"}":19,"id":20,"property":21,"method":22,"index":23,"ID":24,"prop":25,"PROP":26,"(":27,"exprItems":28,")":29,"[":30,"exprItem":31,"]":32,"range":33,"..":34,"integer":35,"list":36,"map":37,"mapItems":38,"mapItem":39,",":40,":":41,"expr":42,"*":43,"/":44,"%":45,"+":46,"-":47,">=":48,">":49,"<=":50,"<":51,"==":52,"!=":53,"&&":54,"||":55,"assignExpr":56,"=":57,"float":58,"dstring":59,"string":60,"TRUE":61,"FALSE":62,"NULL":63,"INTEGER":64,"FLOAT":65,"DSTRING":66,"STRING":67,"SET":68,"if":69,"FOREACH":70,"IN":71,"END":72,"INCLUDE":73,"PARSE":74,"EVALUATE":75,"DEFINE":76,"MACRO":77,"delim":78,"macroParams":79,"MACROCALL":80,"macroCallParams":81,"BMACROCALL":82,"STOP":83,"BREAK":84,"else":85,"ELSE":86,"elseif":87,"ELSEIF":88,"IF":89,"WS":90,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",8:"TEXT",9:"BTEXT",10:"COMMENT",11:"BCOMMENT",12:"RTEXT",15:"$",17:"!",18:"{",19:"}",24:"ID",26:"PROP",27:"(",29:")",30:"[",32:"]",34:"..",40:",",41:":",43:"*",44:"/",45:"%",46:"+",47:"-",48:">=",49:">",50:"<=",51:"<",52:"==",53:"!=",54:"&&",55:"||",57:"=",61:"TRUE",62:"FALSE",63:"NULL",64:"INTEGER",65:"FLOAT",66:"DSTRING",67:"STRING",68:"SET",70:"FOREACH",71:"IN",72:"END",73:"INCLUDE",74:"PARSE",75:"EVALUATE",76:"DEFINE",77:"MACRO",80:"MACROCALL",82:"BMACROCALL",83:"STOP",84:"BREAK",86:"ELSE",88:"ELSEIF",89:"IF",90:"WS"},
productions_: [0,[3,1],[3,2],[5,1],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[13,2],[13,3],[13,4],[13,5],[16,1],[16,1],[16,1],[16,1],[20,1],[25,1],[21,2],[21,2],[21,2],[21,2],[22,4],[22,3],[23,4],[23,4],[23,4],[23,4],[33,5],[33,5],[33,5],[33,5],[36,3],[36,2],[37,3],[37,2],[38,1],[38,3],[39,3],[42,1],[42,3],[42,2],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[56,3],[28,1],[28,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[35,1],[35,2],[58,1],[58,2],[59,1],[60,1],[14,4],[14,1],[14,8],[14,7],[14,8],[14,7],[14,8],[14,7],[14,4],[14,4],[14,4],[14,6],[14,5],[14,8],[14,6],[14,7],[14,5],[14,4],[14,3],[14,6],[14,5],[14,5],[14,4],[14,1],[14,1],[85,1],[85,2],[87,5],[87,4],[87,6],[87,5],[87,6],[87,5],[69,6],[69,5],[69,7],[69,6],[69,7],[69,6],[79,1],[79,3],[81,1],[81,3],[78,1],[78,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {type: 'Statements', pos: this._$, body: []}; 
break;
case 2:
 return $$[$0-1]; 
break;
case 3:
 this.$ = {type: 'Statements', pos: this._$, body: $$[$0]}; 
break;
case 4: case 41: case 61: case 119: case 121:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 6:
 this.$ = {type: 'Text', pos: this._$, value: $$[$0].replace(/\\(?=#|\$)/g, '')}; 
break;
case 7:
 this.$ = {type: 'BText', pos: this._$, value: $$[$0].replace(/^#\[\[|\]\]#/g, '')}; 
break;
case 8:
 this.$ = {type: 'Comment', pos: this._$, value: $$[$0].replace(/^##/, '')}; 
break;
case 9:
 this.$ = {type: 'BComment', pos: this._$, value: $$[$0].replace(/^#\*|\*#$/g, '')}; 
break;
case 10: case 11: case 12: case 17: case 18: case 19: case 20: case 44: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 81: case 106:
 this.$ = $$[$0]; 
break;
case 13:
 this.$ = {type: 'Reference', pos: this._$, object: $$[$0]}; 
break;
case 14:
 this.$ = {type: 'Reference', pos: this._$, object: $$[$0], silent: true}; 
break;
case 15:
 this.$ = {type: 'Reference', pos: this._$, object: $$[$0-1], wrapped: true}; 
break;
case 16:
 this.$ = {type: 'Reference', pos: this._$, object: $$[$0-1], silent: true, wrapped: true}; 
break;
case 21:
 this.$ = {type: 'Identifier', pos: this._$, name: $$[$0]}; 
break;
case 22:
 this.$ = {type: 'Prop', pos: this._$, name: $$[$0].replace(/^\./, '')}; 
break;
case 23: case 24: case 25: case 26:
 this.$ = {type: 'Property', pos: this._$, object: $$[$0-1], property: $$[$0]}; 
break;
case 27:
 this.$ = {type: 'Method', pos: this._$, callee: $$[$0-3], arguments: $$[$0-1]}; 
break;
case 28:
 this.$ = {type: 'Method', pos: this._$, callee: $$[$0-2], arguments: []}; 
break;
case 29: case 30: case 31: case 32:
 this.$ = {type: 'Index', pos: this._$, object: $$[$0-3], property: $$[$0-1]}; 
break;
case 33: case 34: case 35: case 36:
 this.$ = {type: 'Range', pos: this._$, start: $$[$0-3], end: $$[$0-1]}; 
break;
case 37:
 this.$ = {type: 'List', pos: this._$, elements: $$[$0-1]}; 
break;
case 38:
 this.$ = {type: 'List', pos: this._$, elements: []}; 
break;
case 39:
 this.$ = {type: 'Map', pos: this._$, mapItems: $$[$0-1]}; 
break;
case 40:
 this.$ = {type: 'Map', pos: this._$, mapItems: []}; 
break;
case 42: case 62: case 120: case 122:
 this.$ = [$$[$0-2]].concat($$[$0]); 
break;
case 43:
 this.$ = {type: 'MapItem', pos: this._$, property: $$[$0-2], value: $$[$0]}; 
break;
case 45: case 80:
 this.$ = $$[$0-1]; 
break;
case 46:
 this.$ = {type: 'UnaryExpr', pos: this._$, operator: $$[$0-1], argument: $$[$0]}; 
break;
case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59:
 this.$ = {type: 'BinaryExpr', pos: this._$, operator: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 60:
 this.$ = {type: 'AssignExpr', pos: this._$, left: $$[$0-2], right: $$[$0]}; 
break;
case 71:
 this.$ = {type: 'Boolean', pos: this._$, value: true}; 
break;
case 72:
 this.$ = {type: 'Boolean', pos: this._$, value: false}; 
break;
case 73:
 this.$ = {type: 'Null', pos: this._$, value: null}; 
break;
case 74:
 this.$ = {type: 'Integer', pos: this._$, value: parseInt($$[$0])}; 
break;
case 75:
 this.$ = {type: 'Integer', pos: this._$, value: - parseInt($$[$0])}; 
break;
case 76:
 this.$ = {type: 'Float', pos: this._$, value: parseFloat($$[$0])}; 
break;
case 77:
 this.$ = {type: 'Float', pos: this._$, value: - parseInt($$[$0])}; 
break;
case 78:
 this.$ = {type: 'DString', pos: this._$, value: $$[$0].replace(/^"|"$/g, '').replace(/\\"/g, '"')}; 
break;
case 79:
 this.$ = {type: 'String', pos: this._$, value: $$[$0].replace(/^'|'$/g, '')}; 
break;
case 82: case 84: case 86:
 this.$ = {type: 'Foreach', pos: this._$, left: $$[$0-5], right: $$[$0-3], body: $$[$0-1]}; 
break;
case 83: case 85: case 87:
 this.$ = {type: 'Foreach', pos: this._$, left: $$[$0-4], right: $$[$0-2]}; 
break;
case 88:
 this.$ = {type: 'Include', pos: this._$, arguments: $$[$0-1]}; 
break;
case 89:
 this.$ = {type: 'Parse', pos: this._$, argument: $$[$0-1]}; 
break;
case 90:
 this.$ = {type: 'Evaluate', pos: this._$, argument: $$[$0-1]}; 
break;
case 91:
 this.$ = {type: 'Define', pos: this._$, name: $$[$0-3], body: $$[$0-1]}; 
break;
case 92:
 this.$ = {type: 'Define', pos: this._$, name: $$[$0-2]}; 
break;
case 93:
 this.$ = {type: 'Macro', pos: this._$, name: $$[$0-5], arguments: $$[$0-3], body: $$[$0-1]}; 
break;
case 94:
 this.$ = {type: 'Macro', pos: this._$, name: $$[$0-3], arguments: [], body: $$[$0-1]}; 
break;
case 95:
 this.$ = {type: 'Macro', pos: this._$, name: $$[$0-4], arguments: $$[$0-2]}; 
break;
case 96:
 this.$ = {type: 'Macro', pos: this._$, name: $$[$0-2], arguments: []}; 
break;
case 97:
 this.$ = {type: 'MacroCall', pos: this._$, name: $$[$0-3].replace(/^#{?|}$/g, ''), arguments: $$[$0-1]}; 
break;
case 98:
 this.$ = {type: 'MacroCall', pos: this._$, name: $$[$0-2].replace(/^#{?|}$/g, ''), arguments: []}; 
break;
case 99:
 this.$ = {type: 'MacroCall', pos: this._$, name: $$[$0-5].replace(/^#@{?|}$/g, ''), arguments: $$[$0-3], isBlock: true, body: $$[$0-1]}; 
break;
case 100:
 this.$ = {type: 'MacroCall', pos: this._$, name: $$[$0-4].replace(/^#@{?|}$/g, ''), arguments: [], isBlock: true, body: $$[$0-1]}; 
break;
case 101:
 this.$ = {type: 'MacroCall', pos: this._$, name: $$[$0-4].replace(/^#@{?|}$/g, ''), arguments: $$[$0-2], isBlock: true}; 
break;
case 102:
 this.$ = {type: 'MacroCall', pos: this._$, name: $$[$0-3].replace(/^#@{?|}$/g, ''), arguments: [], isBlock: true}; 
break;
case 103:
 this.$ = {type: 'Stop', pos: this._$}; 
break;
case 104:
 this.$ = {type: 'Break', pos: this._$}; 
break;
case 105:
 this.$ = undefined; 
break;
case 107:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-2], consequent: $$[$0]}; 
break;
case 108:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-1]}; 
break;
case 109: case 111:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-3], consequent: $$[$0-1], alternate: $$[$0]}; 
break;
case 110:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-2], alternate: $$[$0]}; 
break;
case 112:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-2], alternate: $$[$01]}; 
break;
case 113:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-3], consequent: $$[$0-1]}; 
break;
case 114:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-2]}; 
break;
case 115: case 117:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-4], consequent: $$[$0-2], alternate: $$[$0-1]}; 
break;
case 116:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-3],  alternate: $$[$0-1]}; 
break;
case 118:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-3], alternate: $$[$0-1]}; 
break;
}
},
table: [{3:1,4:[1,2],5:3,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:11,14:12,15:$V5,68:$V6,69:15,70:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,80:$Vd,82:$Ve,83:$Vf,84:$Vg,89:$Vh},{1:[3]},{1:[2,1]},{4:[1,27]},o($Vi,[2,3]),o($Vi,[2,4],{7:5,13:11,14:12,69:15,6:28,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,15:$V5,68:$V6,70:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,80:$Vd,82:$Ve,83:$Vf,84:$Vg,89:$Vh}),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),{16:29,17:[1,30],18:[1,31],20:32,21:33,22:34,23:35,24:$Vk},{27:[1,37]},o($Vj,[2,81]),{27:[1,38]},{27:[1,39]},{27:[1,40]},{27:[1,41]},{27:[1,42]},{27:[1,43]},{27:[1,44]},{27:[1,45]},o($Vj,[2,103]),o($Vj,[2,104]),{27:[1,46]},{1:[2,2]},o($Vi,[2,5]),o($Vl,[2,13]),{16:47,18:[1,48],20:32,21:33,22:34,23:35,24:$Vk},{16:49,20:32,21:33,22:34,23:35,24:$Vk},o($Vl,[2,17],{25:50,26:$Vm,30:[1,51]}),o($Vl,[2,18],{25:53,26:$Vm,27:[1,54],30:[1,55]}),o($Vl,[2,19],{25:56,26:$Vm,30:[1,57]}),o($Vl,[2,20],{25:58,26:$Vm,30:[1,59]}),o($Vn,[2,21]),{13:61,15:$V5,56:60},{13:62,15:$V5},{13:65,15:$V5,18:$Vo,28:63,30:$Vp,31:64,33:70,35:66,36:71,37:72,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,18:$Vo,30:$Vp,31:83,33:70,35:66,36:71,37:72,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,18:$Vo,30:$Vp,31:84,33:70,35:66,36:71,37:72,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:85,15:$V5},{24:[1,86]},{13:65,15:$V5,18:$Vo,29:[1,88],30:$Vp,31:89,33:70,35:66,36:71,37:72,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,81:87},{13:65,15:$V5,18:$Vo,29:[1,91],30:$Vp,31:89,33:70,35:66,36:71,37:72,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,81:90},{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:92,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},o($Vl,[2,14]),{16:96,20:32,21:33,22:34,23:35,24:$Vk},{19:[1,97]},o($VA,[2,23]),{13:65,15:$V5,18:$Vo,30:$Vp,31:98,33:70,35:66,36:71,37:72,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},o($VA,[2,22]),o($VA,[2,26]),{13:65,15:$V5,18:$Vo,28:99,29:[1,100],30:$Vp,31:64,33:70,35:66,36:71,37:72,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,18:$Vo,30:$Vp,31:101,33:70,35:66,36:71,37:72,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},o($VA,[2,24]),{13:65,15:$V5,18:$Vo,30:$Vp,31:102,33:70,35:66,36:71,37:72,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},o($VA,[2,25]),{13:65,15:$V5,18:$Vo,30:$Vp,31:103,33:70,35:66,36:71,37:72,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{29:[1,104]},{57:[1,105]},{71:[1,106]},{29:[1,107]},o($VB,[2,61],{40:[1,108]}),o($VC,$VD),o($VC,$VE),o($VC,[2,65]),o($VC,[2,66]),o($VC,[2,67]),o($VC,[2,68]),o($VC,[2,69]),o($VC,[2,70]),o($VC,[2,71]),o($VC,[2,72]),o($VC,[2,73]),o($VF,[2,74]),{64:$VG,65:[1,110]},o($VC,[2,76]),o($VC,[2,78]),o($VC,[2,79]),{13:111,15:$V5,18:$Vo,28:113,30:$Vp,31:64,32:[1,114],33:70,35:112,36:71,37:72,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,18:$Vo,19:[1,116],30:$Vp,31:118,33:70,35:66,36:71,37:72,38:115,39:117,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{29:[1,119]},{29:[1,120]},{29:[1,121]},{29:[1,123],40:$VH,78:122,90:$VI},{29:[1,126]},o($Vj,[2,98]),{29:[2,121],40:$VH,78:127,90:$VI},{29:[1,128]},{5:129,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:11,14:12,15:$V5,68:$V6,69:15,70:$V7,72:[1,130],73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,80:$Vd,82:$Ve,83:$Vf,84:$Vg,89:$Vh},{29:[1,131],43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV},o($VW,[2,44]),{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:145,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:146,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{19:[1,147]},o($Vl,[2,15]),{32:[1,148]},{29:[1,149]},o($Vn,[2,28]),{32:[1,150]},{32:[1,151]},{32:[1,152]},o($Vj,[2,80]),{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:153,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:154,15:$V5,30:$Vp,33:155,36:156},o($Vj,[2,88]),{13:65,15:$V5,18:$Vo,28:157,30:$Vp,31:64,33:70,35:66,36:71,37:72,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},o($VF,[2,75]),o($VC,[2,77]),o($VX,$VD,{34:[1,158]}),o($VX,$VE,{34:[1,159]}),{32:[1,160]},o($VC,[2,38]),{19:[1,161]},o($VC,[2,40]),{19:[2,41],40:[1,162]},{41:[1,163]},o($Vj,[2,89]),o($Vj,[2,90]),{5:164,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:11,14:12,15:$V5,68:$V6,69:15,70:$V7,72:[1,165],73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,80:$Vd,82:$Ve,83:$Vf,84:$Vg,89:$Vh},{13:167,15:$V5,79:166},{5:168,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:11,14:12,15:$V5,68:$V6,69:15,70:$V7,72:[1,169],73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,80:$Vd,82:$Ve,83:$Vf,84:$Vg,89:$Vh},o($VY,[2,123]),o($VY,[2,124]),o($Vj,[2,97]),{13:65,15:$V5,18:$Vo,30:$Vp,31:89,33:70,35:66,36:71,37:72,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,81:170},{5:171,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:11,14:12,15:$V5,68:$V6,69:15,70:$V7,72:[1,172],73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,80:$Vd,82:$Ve,83:$Vf,84:$Vg,89:$Vh},{72:[1,173]},o($Vj,[2,102]),{5:174,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:11,14:12,15:$V5,68:$V6,69:15,70:$V7,72:[1,175],73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,80:$Vd,82:$Ve,83:$Vf,84:$Vg,85:176,86:$VZ,87:177,88:$V_,89:$Vh},{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:180,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:181,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:182,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:183,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:184,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:185,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:186,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:187,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:188,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:189,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:190,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:191,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:192,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{29:[1,193],43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV},o($VW,[2,46]),o($Vl,[2,16]),o($Vn,[2,29]),o($Vn,[2,27]),o($Vn,[2,31]),o($Vn,[2,30]),o($Vn,[2,32]),{29:[2,60],43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV},{29:[1,194]},{29:[1,195]},{29:[1,196]},o($VB,[2,62]),{13:197,15:$V5,35:198,47:$V$,64:$Vu},{13:200,15:$V5,35:201,47:$V$,64:$Vu},o($VC,[2,37]),o($VC,[2,39]),{13:65,15:$V5,18:$Vo,30:$Vp,31:118,33:70,35:66,36:71,37:72,38:202,39:117,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{13:65,15:$V5,18:$Vo,30:$Vp,31:203,33:70,35:66,36:71,37:72,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{72:[1,204]},o($Vj,[2,92]),{29:[1,205]},{29:[2,119],40:$VH,78:206,90:$VI},{72:[1,207]},o($Vj,[2,96]),{29:[2,122]},{72:[1,208]},o($Vj,[2,101]),o($Vj,[2,100]),{72:[1,209],85:210,86:$VZ,87:211,88:$V_},o($Vj,[2,114]),{72:[1,212]},{72:[1,213]},{5:214,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:11,14:12,15:$V5,68:$V6,69:15,70:$V7,72:[2,105],73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,80:$Vd,82:$Ve,83:$Vf,84:$Vg,89:$Vh},{27:[1,215]},o($VW,[2,47]),o($VW,[2,48]),o($VW,[2,49]),o($V01,[2,50],{43:$VJ,44:$VK,45:$VL}),o($V01,[2,51],{43:$VJ,44:$VK,45:$VL}),o($V11,[2,52],{43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN}),o($V11,[2,53],{43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN}),o($V11,[2,54],{43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN}),o($V11,[2,55],{43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN}),o($V21,[2,56],{43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR}),o($V21,[2,57],{43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR}),o([29,54,55],[2,58],{43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT}),o([29,55],[2,59],{43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU}),o($VW,[2,45]),{5:216,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:11,14:12,15:$V5,68:$V6,69:15,70:$V7,72:[1,217],73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,80:$Vd,82:$Ve,83:$Vf,84:$Vg,89:$Vh},{5:218,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:11,14:12,15:$V5,68:$V6,69:15,70:$V7,72:[1,219],73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,80:$Vd,82:$Ve,83:$Vf,84:$Vg,89:$Vh},{5:220,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:11,14:12,15:$V5,68:$V6,69:15,70:$V7,72:[1,221],73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,80:$Vd,82:$Ve,83:$Vf,84:$Vg,89:$Vh},{32:[1,222]},{32:[1,223]},{64:$VG},{32:[1,224]},{32:[1,225]},{19:[2,42]},o([19,40],[2,43]),o($Vj,[2,91]),{5:226,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:11,14:12,15:$V5,68:$V6,69:15,70:$V7,72:[1,227],73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,80:$Vd,82:$Ve,83:$Vf,84:$Vg,89:$Vh},{13:167,15:$V5,79:228},o($Vj,[2,94]),o($Vj,[2,99]),o($Vj,[2,113]),{72:[1,229]},{72:[1,230]},o($Vj,[2,116]),o($Vj,[2,118]),{72:[2,106]},{13:65,15:$V5,17:$Vy,18:$Vo,27:$Vz,30:$Vp,31:93,33:70,35:66,36:71,37:72,42:231,47:$Vq,58:67,59:68,60:69,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx},{72:[1,232]},o($Vj,[2,83]),{72:[1,233]},o($Vj,[2,85]),{72:[1,234]},o($Vj,[2,87]),o($VC,[2,33]),o($VC,[2,34]),o($VC,[2,35]),o($VC,[2,36]),{72:[1,235]},o($Vj,[2,95]),{29:[2,120]},o($Vj,[2,115]),o($Vj,[2,117]),{29:[1,236],43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU,55:$VV},o($Vj,[2,82]),o($Vj,[2,84]),o($Vj,[2,86]),o($Vj,[2,93]),{5:237,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:$V4,13:11,14:12,15:$V5,68:$V6,69:15,70:$V7,72:[2,108],73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,80:$Vd,82:$Ve,83:$Vf,84:$Vg,85:238,86:$VZ,87:239,88:$V_,89:$Vh},{72:[2,107],85:240,86:$VZ,87:241,88:$V_},{72:[2,110]},{72:[2,112]},{72:[2,109]},{72:[2,111]}],
defaultActions: {2:[2,1],27:[2,2],170:[2,122],202:[2,42],214:[2,106],228:[2,120],238:[2,110],239:[2,112],240:[2,109],241:[2,111]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:                        return 12; 
break;
case 1:                        return 8; 
break;
case 2:                        return 9; 
break;
case 3:                        return 10; 
break;
case 4:                        return 11; 
break;
case 5: this.pushState('rp');  return yy_.yytext; 
break;
case 6:                        return yy_.yytext; 
break;
case 7: this.popState();
                                      this.pushState('rw');  return yy_.yytext; 
break;
case 8: this.popState();
                                      this.pushState('r');   return 24; 
break;
case 9: this.pushState('r');   return 24; 
break;
case 10:                        return 26; 
break;
case 11: this.pushState('b');   return yy_.yytext; 
break;
case 12: this.popState();       return yy_.yytext; 
break;
case 13: this.pushState('p');   return yy_.yytext; 
break;
case 14: this.popState();       return yy_.yytext; 
break;
case 15: this.pushState('m');   return yy_.yytext; 
break;
case 16: this.popState();       return yy_.yytext; 
break;
case 17: this.popState();       return 4; 
break;
case 18: this.popState(); 
break;
case 19: /*ignore whitespace and \n*/ 
break;
case 20:                        return yy_.yytext; 
break;
case 21:                        return yy_.yytext; 
break;
case 22:                        return yy_.yytext; 
break;
case 23:                        return 71; 
break;
case 24:                        return yy_.yytext.toUpperCase(); 
break;
case 25:                        return yy_.yytext; 
break;
case 26:                        return yy_.yytext; 
break;
case 27:                        return yy_.yytext; 
break;
case 28:                        return yy_.yytext; 
break;
case 29:                        return 65; 
break;
case 30:                        return 64; 
break;
case 31:                        return 66; 
break;
case 32:                        return 67; 
break;
case 33: this.pushState('bp');  return 68; 
break;
case 34: this.pushState('bp');  return 89; 
break;
case 35: this.pushState('bp');  return 88; 
break;
case 36:                        return 86; 
break;
case 37:                        return 72; 
break;
case 38: this.pushState('bp');  return 70;
break;
case 39: this.pushState('bp');  return 73; 
break;
case 40: this.pushState('bp');  return 74; 
break;
case 41:                        return 83; 
break;
case 42:                        return 84; 
break;
case 43: this.pushState('bp');  return 75; 
break;
case 44: this.pushState('bp');  return 76; 
break;
case 45: this.pushState('bpm'); return 77; 
break;
case 46: this.pushState('bpm'); return 80; 
break;
case 47: this.pushState('bpm'); return 82; 
break;
case 48: this.popState();
                                      this.pushState('p');   return 27; 
break;
case 49: this.popState();
                                      this.pushState('pm');  return 27;
break;
case 50:                        return 24; 
break;
case 51:                        return 40; 
break;
case 52: this.popState();       return 29; 
break;
case 53:                        return 90; 
break;
case 54:                        return 8; 
break;
case 55:                        return 4; 
break;
}
},
rules: [/^(?:\$[\s\S]+(\([\s\S]*\)))/,/^(?:(\\\$|\\#|[^\$\#])+)/,/^(?:#\[\[[\s\S]*?\]\]#)/,/^(?:##.*)/,/^(?:#\*[\s\S]*?\*#)/,/^(?:\$(?=!?\{?([a-zA-Z_][a-zA-Z0-9-_]*)))/,/^(?:!)/,/^(?:\{)/,/^(?:([a-zA-Z_][a-zA-Z0-9-_]*))/,/^(?:([a-zA-Z_][a-zA-Z0-9-_]*))/,/^(?:\.([a-zA-Z_][a-zA-Z0-9-_]*))/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:$)/,/^(?:)/,/^(?:\s+)/,/^(?::)/,/^(?:,)/,/^(?:\.\.)/,/^(?:in\b)/,/^(?:true|false|null\b)/,/^(?:==|!=|>=|<=|>|<)/,/^(?:&&|\|\||!)/,/^(?:[\+\-\*\/\%])/,/^(?:=)/,/^(?:\d+\.\d+)/,/^(?:\d+)/,/^(?:"(\\"|[^\"])*")/,/^(?:'(\\'|[^\'])*')/,/^(?:#(\{set\}|set)((?=[ \t]*\()))/,/^(?:#(\{if\}|if)((?=[ \t]*\()))/,/^(?:#(\{elseif\}|elseif)((?=[ \t]*\()))/,/^(?:#(\{else\}|else(?!([a-zA-Z0-9-_]))))/,/^(?:#(\{end\}|end(?!([a-zA-Z0-9-_]))))/,/^(?:#(\{foreach\}|foreach)((?=[ \t]*\()))/,/^(?:#(\{include\}|include)((?=[ \t]*\()))/,/^(?:#(\{parse\}|parse)((?=[ \t]*\()))/,/^(?:#(\{stop\}|stop(?!([a-zA-Z0-9-_]))))/,/^(?:#(\{break\}|break(?!([a-zA-Z0-9-_]))))/,/^(?:#(\{evaluate\}|evaluate)((?=[ \t]*\()))/,/^(?:#(\{define\}|define)((?=[ \t]*\()))/,/^(?:#(\{macro\}|macro)((?=[ \t]*\()))/,/^(?:#(\{([a-zA-Z_][a-zA-Z0-9-_]*)\}|([a-zA-Z_][a-zA-Z0-9-_]*))((?=[ \t]*\()))/,/^(?:#@(\{([a-zA-Z_][a-zA-Z0-9-_]*)\}|([a-zA-Z_][a-zA-Z0-9-_]*))((?=[ \t]*\()))/,/^(?:[ \t]*\()/,/^(?:[ \t]*\(\s*)/,/^(?:([a-zA-Z_][a-zA-Z0-9-_]*))/,/^(?:\s*,\s*)/,/^(?:\s*\))/,/^(?:\s+)/,/^(?:[\$\#])/,/^(?:$)/],
conditions: {"rp":{"rules":[6,7,8],"inclusive":false},"rw":{"rules":[9,16],"inclusive":false},"r":{"rules":[10,11,13,17,18],"inclusive":false},"b":{"rules":[5,11,12,13,15,19,21,22,24,25,26,27,28,29,30,31,32],"inclusive":false},"bpm":{"rules":[49],"inclusive":false},"bp":{"rules":[48],"inclusive":false},"pm":{"rules":[5,11,13,15,24,29,30,31,32,50,51,52,53],"inclusive":false},"p":{"rules":[5,11,13,14,15,19,21,23,24,25,26,27,28,29,30,31,32],"inclusive":false},"m":{"rules":[5,11,13,15,16,19,20,21,24,25,26,27,28,29,30,31,32],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = velocity;
exports.Parser = velocity.Parser;
exports.parse = function () { return velocity.parse.apply(velocity, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}