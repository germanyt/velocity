/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var velocity = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,7],$V2=[1,8],$V3=[1,9],$V4=[1,12],$V5=[1,13],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[1,20],$Vc=[1,21],$Vd=[1,22],$Ve=[1,23],$Vf=[1,24],$Vg=[1,25],$Vh=[4,71,85,87],$Vi=[4,8,9,10,11,14,67,69,71,72,73,74,75,76,79,81,82,83,85,87,88],$Vj=[1,35],$Vk=[4,8,9,10,11,14,18,28,31,33,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,56,67,69,70,71,72,73,74,75,76,79,81,82,83,85,87,88,89],$Vl=[1,51],$Vm=[4,8,9,10,11,14,18,25,28,29,31,33,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,56,67,69,70,71,72,73,74,75,76,79,81,82,83,85,87,88,89],$Vn=[1,81],$Vo=[1,80],$Vp=[1,76],$Vq=[1,72],$Vr=[1,73],$Vs=[1,74],$Vt=[1,75],$Vu=[1,77],$Vv=[1,78],$Vw=[1,79],$Vx=[1,94],$Vy=[1,93],$Vz=[4,8,9,10,11,14,18,25,26,28,29,31,33,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,56,67,69,70,71,72,73,74,75,76,79,81,82,83,85,87,88,89],$VA=[28,31],$VB=[18,28,31,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,89],$VC=[2,62],$VD=[2,63],$VE=[18,28,31,33,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,89],$VF=[1,108],$VG=[1,124],$VH=[1,123],$VI=[1,131],$VJ=[1,132],$VK=[1,133],$VL=[1,134],$VM=[1,135],$VN=[1,136],$VO=[1,137],$VP=[1,138],$VQ=[1,139],$VR=[1,140],$VS=[1,141],$VT=[1,142],$VU=[1,143],$VV=[28,42,43,44,45,46,47,48,49,50,51,52,53,54],$VW=[31,39],$VX=[14,17,29,46,60,61,62,63,64,65,66],$VY=[1,177],$VZ=[1,178],$V_=[1,198],$V$=[28,45,46,47,48,49,50,51,52,53,54],$V01=[28,47,48,49,50,51,52,53,54],$V11=[28,51,52,53,54];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"EOF":4,"statements":5,"states":6,"statement":7,"TEXT":8,"BTEXT":9,"COMMENT":10,"BCOMMENT":11,"reference":12,"directive":13,"$":14,"ref":15,"!":16,"{":17,"}":18,"id":19,"property":20,"method":21,"index":22,"ID":23,"prop":24,"PROP":25,"(":26,"exprItems":27,")":28,"[":29,"exprItem":30,"]":31,"range":32,"..":33,"integer":34,"list":35,"map":36,"mapItems":37,"mapItem":38,",":39,":":40,"expr":41,"*":42,"/":43,"%":44,"+":45,"-":46,">=":47,">":48,"<=":49,"<":50,"==":51,"!=":52,"&&":53,"||":54,"assignExpr":55,"=":56,"float":57,"dstring":58,"string":59,"TRUE":60,"FALSE":61,"NULL":62,"INTEGER":63,"FLOAT":64,"DSTRING":65,"STRING":66,"SET":67,"if":68,"FOREACH":69,"IN":70,"END":71,"INCLUDE":72,"PARSE":73,"EVALUATE":74,"DEFINE":75,"MACRO":76,"delim":77,"macroParams":78,"MACROCALL":79,"macroCallParams":80,"BMACROCALL":81,"STOP":82,"BREAK":83,"else":84,"ELSE":85,"elseif":86,"ELSEIF":87,"IF":88,"WS":89,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",8:"TEXT",9:"BTEXT",10:"COMMENT",11:"BCOMMENT",14:"$",16:"!",17:"{",18:"}",23:"ID",25:"PROP",26:"(",28:")",29:"[",31:"]",33:"..",39:",",40:":",42:"*",43:"/",44:"%",45:"+",46:"-",47:">=",48:">",49:"<=",50:"<",51:"==",52:"!=",53:"&&",54:"||",56:"=",60:"TRUE",61:"FALSE",62:"NULL",63:"INTEGER",64:"FLOAT",65:"DSTRING",66:"STRING",67:"SET",69:"FOREACH",70:"IN",71:"END",72:"INCLUDE",73:"PARSE",74:"EVALUATE",75:"DEFINE",76:"MACRO",79:"MACROCALL",81:"BMACROCALL",82:"STOP",83:"BREAK",85:"ELSE",87:"ELSEIF",88:"IF",89:"WS"},
productions_: [0,[3,1],[3,2],[5,1],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[12,2],[12,3],[12,4],[12,5],[15,1],[15,1],[15,1],[15,1],[19,1],[24,1],[20,2],[20,2],[20,2],[20,2],[21,4],[21,3],[22,4],[22,4],[22,4],[22,4],[32,5],[32,5],[32,5],[32,5],[35,3],[35,2],[36,3],[36,2],[37,1],[37,3],[38,3],[41,1],[41,3],[41,2],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[55,3],[27,1],[27,3],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[34,1],[34,2],[57,1],[57,2],[58,1],[59,1],[13,4],[13,1],[13,8],[13,7],[13,8],[13,7],[13,8],[13,7],[13,4],[13,4],[13,4],[13,6],[13,5],[13,8],[13,6],[13,7],[13,5],[13,4],[13,3],[13,6],[13,5],[13,5],[13,4],[13,1],[13,1],[84,1],[84,2],[86,5],[86,4],[86,6],[86,5],[86,6],[86,5],[68,6],[68,5],[68,7],[68,6],[68,7],[68,6],[78,1],[78,3],[80,1],[80,3],[77,1],[77,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {type: 'Statements', pos: this._$, body: []}; 
break;
case 2:
 return $$[$0-1]; 
break;
case 3:
 this.$ = {type: 'Statements', pos: this._$, body: $$[$0]}; 
break;
case 4: case 40: case 60: case 118: case 120:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 6:
 this.$ = {type: 'Text', pos: this._$, value: $$[$0].replace(/\\(?=#|\$)/g, '')}; 
break;
case 7:
 this.$ = {type: 'BText', pos: this._$, value: $$[$0].replace(/^#\[\[|\]\]#/g, '')}; 
break;
case 8:
 this.$ = {type: 'Comment', pos: this._$, value: $$[$0].replace(/^##/, '')}; 
break;
case 9:
 this.$ = {type: 'BComment', pos: this._$, value: $$[$0].replace(/^#\*|\*#$/g, '')}; 
break;
case 10: case 11: case 16: case 17: case 18: case 19: case 43: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 80: case 105:
 this.$ = $$[$0]; 
break;
case 12:
 this.$ = {type: 'Reference', pos: this._$, object: $$[$0]}; 
break;
case 13:
 this.$ = {type: 'Reference', pos: this._$, object: $$[$0], silent: true}; 
break;
case 14:
 this.$ = {type: 'Reference', pos: this._$, object: $$[$0-1], wrapped: true}; 
break;
case 15:
 this.$ = {type: 'Reference', pos: this._$, object: $$[$0-1], silent: true, wrapped: true}; 
break;
case 20:
 this.$ = {type: 'Identifier', pos: this._$, name: $$[$0]}; 
break;
case 21:
 this.$ = {type: 'Prop', pos: this._$, name: $$[$0].replace(/^\./, '')}; 
break;
case 22: case 23: case 24: case 25:
 this.$ = {type: 'Property', pos: this._$, object: $$[$0-1], property: $$[$0]}; 
break;
case 26:
 this.$ = {type: 'Method', pos: this._$, callee: $$[$0-3], arguments: $$[$0-1]}; 
break;
case 27:
 this.$ = {type: 'Method', pos: this._$, callee: $$[$0-2], arguments: []}; 
break;
case 28: case 29: case 30: case 31:
 this.$ = {type: 'Index', pos: this._$, object: $$[$0-3], property: $$[$0-1]}; 
break;
case 32: case 33: case 34: case 35:
 this.$ = {type: 'Range', pos: this._$, start: $$[$0-3], end: $$[$0-1]}; 
break;
case 36:
 this.$ = {type: 'List', pos: this._$, elements: $$[$0-1]}; 
break;
case 37:
 this.$ = {type: 'List', pos: this._$, elements: []}; 
break;
case 38:
 this.$ = {type: 'Map', pos: this._$, mapItems: $$[$0-1]}; 
break;
case 39:
 this.$ = {type: 'Map', pos: this._$, mapItems: []}; 
break;
case 41: case 61: case 119: case 121:
 this.$ = [$$[$0-2]].concat($$[$0]); 
break;
case 42:
 this.$ = {type: 'MapItem', pos: this._$, property: $$[$0-2], value: $$[$0]}; 
break;
case 44: case 79:
 this.$ = $$[$0-1]; 
break;
case 45:
 this.$ = {type: 'UnaryExpr', pos: this._$, operator: $$[$0-1], argument: $$[$0]}; 
break;
case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58:
 this.$ = {type: 'BinaryExpr', pos: this._$, operator: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 59:
 this.$ = {type: 'AssignExpr', pos: this._$, left: $$[$0-2], right: $$[$0]}; 
break;
case 70:
 this.$ = {type: 'Boolean', pos: this._$, value: true}; 
break;
case 71:
 this.$ = {type: 'Boolean', pos: this._$, value: false}; 
break;
case 72:
 this.$ = {type: 'Null', pos: this._$, value: null}; 
break;
case 73:
 this.$ = {type: 'Integer', pos: this._$, value: parseInt($$[$0])}; 
break;
case 74:
 this.$ = {type: 'Integer', pos: this._$, value: - parseInt($$[$0])}; 
break;
case 75:
 this.$ = {type: 'Float', pos: this._$, value: parseFloat($$[$0])}; 
break;
case 76:
 this.$ = {type: 'Float', pos: this._$, value: - parseInt($$[$0])}; 
break;
case 77:
 this.$ = {type: 'DString', pos: this._$, value: $$[$0].replace(/^"|"$/g, '').replace(/\\"/g, '"')}; 
break;
case 78:
 this.$ = {type: 'String', pos: this._$, value: $$[$0].replace(/^'|'$/g, '')}; 
break;
case 81: case 83: case 85:
 this.$ = {type: 'Foreach', pos: this._$, left: $$[$0-5], right: $$[$0-3], body: $$[$0-1]}; 
break;
case 82: case 84: case 86:
 this.$ = {type: 'Foreach', pos: this._$, left: $$[$0-4], right: $$[$0-2]}; 
break;
case 87:
 this.$ = {type: 'Include', pos: this._$, arguments: $$[$0-1]}; 
break;
case 88:
 this.$ = {type: 'Parse', pos: this._$, argument: $$[$0-1]}; 
break;
case 89:
 this.$ = {type: 'Evaluate', pos: this._$, argument: $$[$0-1]}; 
break;
case 90:
 this.$ = {type: 'Define', pos: this._$, name: $$[$0-3], body: $$[$0-1]}; 
break;
case 91:
 this.$ = {type: 'Define', pos: this._$, name: $$[$0-2]}; 
break;
case 92:
 this.$ = {type: 'Macro', pos: this._$, name: $$[$0-5], arguments: $$[$0-3], body: $$[$0-1]}; 
break;
case 93:
 this.$ = {type: 'Macro', pos: this._$, name: $$[$0-3], arguments: [], body: $$[$0-1]}; 
break;
case 94:
 this.$ = {type: 'Macro', pos: this._$, name: $$[$0-4], arguments: $$[$0-2]}; 
break;
case 95:
 this.$ = {type: 'Macro', pos: this._$, name: $$[$0-2], arguments: []}; 
break;
case 96:
 this.$ = {type: 'MacroCall', pos: this._$, name: $$[$0-3].replace(/^#{?|}$/g, ''), arguments: $$[$0-1]}; 
break;
case 97:
 this.$ = {type: 'MacroCall', pos: this._$, name: $$[$0-2].replace(/^#{?|}$/g, ''), arguments: []}; 
break;
case 98:
 this.$ = {type: 'MacroCall', pos: this._$, name: $$[$0-5].replace(/^#@{?|}$/g, ''), arguments: $$[$0-3], isBlock: true, body: $$[$0-1]}; 
break;
case 99:
 this.$ = {type: 'MacroCall', pos: this._$, name: $$[$0-4].replace(/^#@{?|}$/g, ''), arguments: [], isBlock: true, body: $$[$0-1]}; 
break;
case 100:
 this.$ = {type: 'MacroCall', pos: this._$, name: $$[$0-4].replace(/^#@{?|}$/g, ''), arguments: $$[$0-2], isBlock: true}; 
break;
case 101:
 this.$ = {type: 'MacroCall', pos: this._$, name: $$[$0-3].replace(/^#@{?|}$/g, ''), arguments: [], isBlock: true}; 
break;
case 102:
 this.$ = {type: 'Stop', pos: this._$}; 
break;
case 103:
 this.$ = {type: 'Break', pos: this._$}; 
break;
case 104:
 this.$ = undefined; 
break;
case 106:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-2], consequent: $$[$0]}; 
break;
case 107:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-1]}; 
break;
case 108: case 110:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-3], consequent: $$[$0-1], alternate: $$[$0]}; 
break;
case 109:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-2], alternate: $$[$0]}; 
break;
case 111:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-2], alternate: $$[$01]}; 
break;
case 112:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-3], consequent: $$[$0-1]}; 
break;
case 113:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-2]}; 
break;
case 114: case 116:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-4], consequent: $$[$0-2], alternate: $$[$0-1]}; 
break;
case 115:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-3],  alternate: $$[$0-1]}; 
break;
case 117:
 this.$ = {type: 'If', pos: this._$, test: $$[$0-3], alternate: $$[$0-1]}; 
break;
}
},
table: [{3:1,4:[1,2],5:3,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:10,13:11,14:$V4,67:$V5,68:14,69:$V6,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,79:$Vc,81:$Vd,82:$Ve,83:$Vf,88:$Vg},{1:[3]},{1:[2,1]},{4:[1,26]},o($Vh,[2,3]),o($Vh,[2,4],{7:5,12:10,13:11,68:14,6:27,8:$V0,9:$V1,10:$V2,11:$V3,14:$V4,67:$V5,69:$V6,72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,79:$Vc,81:$Vd,82:$Ve,83:$Vf,88:$Vg}),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),{15:28,16:[1,29],17:[1,30],19:31,20:32,21:33,22:34,23:$Vj},{26:[1,36]},o($Vi,[2,80]),{26:[1,37]},{26:[1,38]},{26:[1,39]},{26:[1,40]},{26:[1,41]},{26:[1,42]},{26:[1,43]},{26:[1,44]},o($Vi,[2,102]),o($Vi,[2,103]),{26:[1,45]},{1:[2,2]},o($Vh,[2,5]),o($Vk,[2,12]),{15:46,17:[1,47],19:31,20:32,21:33,22:34,23:$Vj},{15:48,19:31,20:32,21:33,22:34,23:$Vj},o($Vk,[2,16],{24:49,25:$Vl,29:[1,50]}),o($Vk,[2,17],{24:52,25:$Vl,26:[1,53],29:[1,54]}),o($Vk,[2,18],{24:55,25:$Vl,29:[1,56]}),o($Vk,[2,19],{24:57,25:$Vl,29:[1,58]}),o($Vm,[2,20]),{12:60,14:$V4,55:59},{12:61,14:$V4},{12:64,14:$V4,17:$Vn,27:62,29:$Vo,30:63,32:69,34:65,35:70,36:71,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,17:$Vn,29:$Vo,30:82,32:69,34:65,35:70,36:71,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,17:$Vn,29:$Vo,30:83,32:69,34:65,35:70,36:71,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:84,14:$V4},{23:[1,85]},{12:64,14:$V4,17:$Vn,28:[1,87],29:$Vo,30:88,32:69,34:65,35:70,36:71,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,80:86},{12:64,14:$V4,17:$Vn,28:[1,90],29:$Vo,30:88,32:69,34:65,35:70,36:71,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,80:89},{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:91,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},o($Vk,[2,13]),{15:95,19:31,20:32,21:33,22:34,23:$Vj},{18:[1,96]},o($Vz,[2,22]),{12:64,14:$V4,17:$Vn,29:$Vo,30:97,32:69,34:65,35:70,36:71,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},o($Vz,[2,21]),o($Vz,[2,25]),{12:64,14:$V4,17:$Vn,27:98,28:[1,99],29:$Vo,30:63,32:69,34:65,35:70,36:71,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,17:$Vn,29:$Vo,30:100,32:69,34:65,35:70,36:71,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},o($Vz,[2,23]),{12:64,14:$V4,17:$Vn,29:$Vo,30:101,32:69,34:65,35:70,36:71,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},o($Vz,[2,24]),{12:64,14:$V4,17:$Vn,29:$Vo,30:102,32:69,34:65,35:70,36:71,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{28:[1,103]},{56:[1,104]},{70:[1,105]},{28:[1,106]},o($VA,[2,60],{39:[1,107]}),o($VB,$VC),o($VB,$VD),o($VB,[2,64]),o($VB,[2,65]),o($VB,[2,66]),o($VB,[2,67]),o($VB,[2,68]),o($VB,[2,69]),o($VB,[2,70]),o($VB,[2,71]),o($VB,[2,72]),o($VE,[2,73]),{63:$VF,64:[1,109]},o($VB,[2,75]),o($VB,[2,77]),o($VB,[2,78]),{12:110,14:$V4,17:$Vn,27:112,29:$Vo,30:63,31:[1,113],32:69,34:111,35:70,36:71,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,17:$Vn,18:[1,115],29:$Vo,30:117,32:69,34:65,35:70,36:71,37:114,38:116,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{28:[1,118]},{28:[1,119]},{28:[1,120]},{28:[1,122],39:$VG,77:121,89:$VH},{28:[1,125]},o($Vi,[2,97]),{28:[2,120],39:$VG,77:126,89:$VH},{28:[1,127]},{5:128,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:10,13:11,14:$V4,67:$V5,68:14,69:$V6,71:[1,129],72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,79:$Vc,81:$Vd,82:$Ve,83:$Vf,88:$Vg},{28:[1,130],42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU},o($VV,[2,43]),{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:144,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:145,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{18:[1,146]},o($Vk,[2,14]),{31:[1,147]},{28:[1,148]},o($Vm,[2,27]),{31:[1,149]},{31:[1,150]},{31:[1,151]},o($Vi,[2,79]),{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:152,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:153,14:$V4,29:$Vo,32:154,35:155},o($Vi,[2,87]),{12:64,14:$V4,17:$Vn,27:156,29:$Vo,30:63,32:69,34:65,35:70,36:71,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},o($VE,[2,74]),o($VB,[2,76]),o($VW,$VC,{33:[1,157]}),o($VW,$VD,{33:[1,158]}),{31:[1,159]},o($VB,[2,37]),{18:[1,160]},o($VB,[2,39]),{18:[2,40],39:[1,161]},{40:[1,162]},o($Vi,[2,88]),o($Vi,[2,89]),{5:163,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:10,13:11,14:$V4,67:$V5,68:14,69:$V6,71:[1,164],72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,79:$Vc,81:$Vd,82:$Ve,83:$Vf,88:$Vg},{12:166,14:$V4,78:165},{5:167,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:10,13:11,14:$V4,67:$V5,68:14,69:$V6,71:[1,168],72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,79:$Vc,81:$Vd,82:$Ve,83:$Vf,88:$Vg},o($VX,[2,122]),o($VX,[2,123]),o($Vi,[2,96]),{12:64,14:$V4,17:$Vn,29:$Vo,30:88,32:69,34:65,35:70,36:71,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,80:169},{5:170,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:10,13:11,14:$V4,67:$V5,68:14,69:$V6,71:[1,171],72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,79:$Vc,81:$Vd,82:$Ve,83:$Vf,88:$Vg},{71:[1,172]},o($Vi,[2,101]),{5:173,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:10,13:11,14:$V4,67:$V5,68:14,69:$V6,71:[1,174],72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,79:$Vc,81:$Vd,82:$Ve,83:$Vf,84:175,85:$VY,86:176,87:$VZ,88:$Vg},{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:179,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:180,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:181,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:182,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:183,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:184,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:185,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:186,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:187,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:188,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:189,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:190,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:191,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{28:[1,192],42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU},o($VV,[2,45]),o($Vk,[2,15]),o($Vm,[2,28]),o($Vm,[2,26]),o($Vm,[2,30]),o($Vm,[2,29]),o($Vm,[2,31]),{28:[2,59],42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU},{28:[1,193]},{28:[1,194]},{28:[1,195]},o($VA,[2,61]),{12:196,14:$V4,34:197,46:$V_,63:$Vt},{12:199,14:$V4,34:200,46:$V_,63:$Vt},o($VB,[2,36]),o($VB,[2,38]),{12:64,14:$V4,17:$Vn,29:$Vo,30:117,32:69,34:65,35:70,36:71,37:201,38:116,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{12:64,14:$V4,17:$Vn,29:$Vo,30:202,32:69,34:65,35:70,36:71,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{71:[1,203]},o($Vi,[2,91]),{28:[1,204]},{28:[2,118],39:$VG,77:205,89:$VH},{71:[1,206]},o($Vi,[2,95]),{28:[2,121]},{71:[1,207]},o($Vi,[2,100]),o($Vi,[2,99]),{71:[1,208],84:209,85:$VY,86:210,87:$VZ},o($Vi,[2,113]),{71:[1,211]},{71:[1,212]},{5:213,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:10,13:11,14:$V4,67:$V5,68:14,69:$V6,71:[2,104],72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,79:$Vc,81:$Vd,82:$Ve,83:$Vf,88:$Vg},{26:[1,214]},o($VV,[2,46]),o($VV,[2,47]),o($VV,[2,48]),o($V$,[2,49],{42:$VI,43:$VJ,44:$VK}),o($V$,[2,50],{42:$VI,43:$VJ,44:$VK}),o($V01,[2,51],{42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM}),o($V01,[2,52],{42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM}),o($V01,[2,53],{42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM}),o($V01,[2,54],{42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM}),o($V11,[2,55],{42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ}),o($V11,[2,56],{42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ}),o([28,53,54],[2,57],{42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS}),o([28,54],[2,58],{42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT}),o($VV,[2,44]),{5:215,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:10,13:11,14:$V4,67:$V5,68:14,69:$V6,71:[1,216],72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,79:$Vc,81:$Vd,82:$Ve,83:$Vf,88:$Vg},{5:217,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:10,13:11,14:$V4,67:$V5,68:14,69:$V6,71:[1,218],72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,79:$Vc,81:$Vd,82:$Ve,83:$Vf,88:$Vg},{5:219,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:10,13:11,14:$V4,67:$V5,68:14,69:$V6,71:[1,220],72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,79:$Vc,81:$Vd,82:$Ve,83:$Vf,88:$Vg},{31:[1,221]},{31:[1,222]},{63:$VF},{31:[1,223]},{31:[1,224]},{18:[2,41]},o([18,39],[2,42]),o($Vi,[2,90]),{5:225,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:10,13:11,14:$V4,67:$V5,68:14,69:$V6,71:[1,226],72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,79:$Vc,81:$Vd,82:$Ve,83:$Vf,88:$Vg},{12:166,14:$V4,78:227},o($Vi,[2,93]),o($Vi,[2,98]),o($Vi,[2,112]),{71:[1,228]},{71:[1,229]},o($Vi,[2,115]),o($Vi,[2,117]),{71:[2,105]},{12:64,14:$V4,16:$Vx,17:$Vn,26:$Vy,29:$Vo,30:92,32:69,34:65,35:70,36:71,41:230,46:$Vp,57:66,58:67,59:68,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw},{71:[1,231]},o($Vi,[2,82]),{71:[1,232]},o($Vi,[2,84]),{71:[1,233]},o($Vi,[2,86]),o($VB,[2,32]),o($VB,[2,33]),o($VB,[2,34]),o($VB,[2,35]),{71:[1,234]},o($Vi,[2,94]),{28:[2,119]},o($Vi,[2,114]),o($Vi,[2,116]),{28:[1,235],42:$VI,43:$VJ,44:$VK,45:$VL,46:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,53:$VT,54:$VU},o($Vi,[2,81]),o($Vi,[2,83]),o($Vi,[2,85]),o($Vi,[2,92]),{5:236,6:4,7:5,8:$V0,9:$V1,10:$V2,11:$V3,12:10,13:11,14:$V4,67:$V5,68:14,69:$V6,71:[2,107],72:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,79:$Vc,81:$Vd,82:$Ve,83:$Vf,84:237,85:$VY,86:238,87:$VZ,88:$Vg},{71:[2,106],84:239,85:$VY,86:240,87:$VZ},{71:[2,109]},{71:[2,111]},{71:[2,108]},{71:[2,110]}],
defaultActions: {2:[2,1],26:[2,2],169:[2,121],201:[2,41],213:[2,105],227:[2,119],237:[2,109],238:[2,111],239:[2,108],240:[2,110]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:                        return 8; 
break;
case 1:                        return 8; 
break;
case 2:                        return 9; 
break;
case 3:                        return 10; 
break;
case 4:                        return 11; 
break;
case 5: this.pushState('rp');  return yy_.yytext; 
break;
case 6:                        return yy_.yytext; 
break;
case 7: this.popState();
                                      this.pushState('rw');  return yy_.yytext; 
break;
case 8: this.popState();
                                      this.pushState('r');   return 23; 
break;
case 9: this.pushState('r');   return 23; 
break;
case 10:                        return 25; 
break;
case 11: this.pushState('b');   return yy_.yytext; 
break;
case 12: this.popState();       return yy_.yytext; 
break;
case 13: this.pushState('p');   return yy_.yytext; 
break;
case 14: this.popState();       return yy_.yytext; 
break;
case 15: this.pushState('m');   return yy_.yytext; 
break;
case 16: this.popState();       return yy_.yytext; 
break;
case 17: this.popState();       return 4; 
break;
case 18: this.popState(); 
break;
case 19: /*ignore whitespace and \n*/ 
break;
case 20:                        return yy_.yytext; 
break;
case 21:                        return yy_.yytext; 
break;
case 22:                        return yy_.yytext; 
break;
case 23:                        return 70; 
break;
case 24:                        return yy_.yytext.toUpperCase(); 
break;
case 25:                        return yy_.yytext; 
break;
case 26:                        return yy_.yytext; 
break;
case 27:                        return yy_.yytext; 
break;
case 28:                        return yy_.yytext; 
break;
case 29:                        return 64; 
break;
case 30:                        return 63; 
break;
case 31:                        return 65; 
break;
case 32:                        return 66; 
break;
case 33: this.pushState('bp');  return 67; 
break;
case 34: this.pushState('bp');  return 88; 
break;
case 35: this.pushState('bp');  return 87; 
break;
case 36:                        return 85; 
break;
case 37:                        return 71; 
break;
case 38: this.pushState('bp');  return 69;
break;
case 39: this.pushState('bp');  return 72; 
break;
case 40: this.pushState('bp');  return 73; 
break;
case 41:                        return 82; 
break;
case 42:                        return 83; 
break;
case 43: this.pushState('bp');  return 74; 
break;
case 44: this.pushState('bp');  return 75; 
break;
case 45: this.pushState('bpm'); return 76; 
break;
case 46: this.pushState('bpm'); return 79; 
break;
case 47: this.pushState('bpm'); return 81; 
break;
case 48: this.popState();
                                      this.pushState('p');   return 26; 
break;
case 49: this.popState();
                                      this.pushState('pm');  return 26;
break;
case 50:                        return 23; 
break;
case 51:                        return 39; 
break;
case 52: this.popState();       return 28; 
break;
case 53:                        return 89; 
break;
case 54:                        return 8; 
break;
case 55:                        return 4; 
break;
}
},
rules: [/^(?:\$\w+(?=\())/,/^(?:(\\\$|\\#|[^\$\#])+)/,/^(?:#\[\[[\s\S]*?\]\]#)/,/^(?:##.*)/,/^(?:#\*[\s\S]*?\*#)/,/^(?:\$(?=!?\{?([a-zA-Z_][a-zA-Z0-9-_]*)))/,/^(?:!)/,/^(?:\{)/,/^(?:([a-zA-Z_][a-zA-Z0-9-_]*))/,/^(?:([a-zA-Z_][a-zA-Z0-9-_]*))/,/^(?:\.([a-zA-Z_][a-zA-Z0-9-_]*))/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:$)/,/^(?:)/,/^(?:\s+)/,/^(?::)/,/^(?:,)/,/^(?:\.\.)/,/^(?:in\b)/,/^(?:true|false|null\b)/,/^(?:==|!=|>=|<=|>|<)/,/^(?:&&|\|\||!)/,/^(?:[\+\-\*\/\%])/,/^(?:=)/,/^(?:\d+\.\d+)/,/^(?:\d+)/,/^(?:"(\\"|[^\"])*")/,/^(?:'(\\'|[^\'])*')/,/^(?:#(\{set\}|set)((?=[ \t]*\()))/,/^(?:#(\{if\}|if)((?=[ \t]*\()))/,/^(?:#(\{elseif\}|elseif)((?=[ \t]*\()))/,/^(?:#(\{else\}|else(?!([a-zA-Z0-9-_]))))/,/^(?:#(\{end\}|end(?!([a-zA-Z0-9-_]))))/,/^(?:#(\{foreach\}|foreach)((?=[ \t]*\()))/,/^(?:#(\{include\}|include)((?=[ \t]*\()))/,/^(?:#(\{parse\}|parse)((?=[ \t]*\()))/,/^(?:#(\{stop\}|stop(?!([a-zA-Z0-9-_]))))/,/^(?:#(\{break\}|break(?!([a-zA-Z0-9-_]))))/,/^(?:#(\{evaluate\}|evaluate)((?=[ \t]*\()))/,/^(?:#(\{define\}|define)((?=[ \t]*\()))/,/^(?:#(\{macro\}|macro)((?=[ \t]*\()))/,/^(?:#(\{([a-zA-Z_][a-zA-Z0-9-_]*)\}|([a-zA-Z_][a-zA-Z0-9-_]*))((?=[ \t]*\()))/,/^(?:#@(\{([a-zA-Z_][a-zA-Z0-9-_]*)\}|([a-zA-Z_][a-zA-Z0-9-_]*))((?=[ \t]*\()))/,/^(?:[ \t]*\()/,/^(?:[ \t]*\(\s*)/,/^(?:([a-zA-Z_][a-zA-Z0-9-_]*))/,/^(?:\s*,\s*)/,/^(?:\s*\))/,/^(?:\s+)/,/^(?:[\$\#])/,/^(?:$)/],
conditions: {"rp":{"rules":[6,7,8],"inclusive":false},"rw":{"rules":[9,16],"inclusive":false},"r":{"rules":[10,11,13,17,18],"inclusive":false},"b":{"rules":[5,11,12,13,15,19,21,22,24,25,26,27,28,29,30,31,32],"inclusive":false},"bpm":{"rules":[49],"inclusive":false},"bp":{"rules":[48],"inclusive":false},"pm":{"rules":[5,11,13,15,24,29,30,31,32,50,51,52,53],"inclusive":false},"p":{"rules":[5,11,13,14,15,19,21,23,24,25,26,27,28,29,30,31,32],"inclusive":false},"m":{"rules":[5,11,13,15,16,19,20,21,24,25,26,27,28,29,30,31,32],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = velocity;
exports.Parser = velocity.Parser;
exports.parse = function () { return velocity.parse.apply(velocity, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}